import requests
from bs4 import BeautifulSoup
import schedule
import time

# URL for Kaunas Žalgiris games on Euroleague
url = "https://www.euroleaguebasketball.net/en/euroleague/teams/zalgiris-kaunas/games/zal/?season=2024-25"

# Discord webhook URL (replace with your actual webhook URL)
WEBHOOK_URL = "https://discord.com/api/webhooks/1318732693445410816/xFZbKLLOTfdq-iy_RUxlIRnwbew3uLd8atDZUAN2BrmkRL8mHkkCAQZtIB8b8uxvHzOt"

# Function to fetch Kaunas Žalgiris game schedule
def fetch_zalgiris_schedule():
    # Send a GET request to the Euroleague page
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find the game schedule container in the page
        games_section = soup.find_all('div', class_='event__data')

        games = []
        for game in games_section:
            date = game.find('span', class_='event__date')
            time = game.find('span', class_='event__time')
            opponent = game.find('span', class_='event__team-name')

            if date and time and opponent:
                game_details = {
                    'date': date.text.strip(),
                    'time': time.text.strip(),
                    'opponent': opponent.text.strip()
                }
                games.append(game_details)

        return games
    else:
        print(f"Failed to retrieve data, status code: {response.status_code}")
        return []

# Function to send message to Discord Webhook
def send_to_discord(games):
    for game in games:
        message = {
            "content": f"Upcoming Kaunas Žalgiris Game:\n"
                       f"Date: {game['date']} | Time: {game['time']} | Opponent: {game['opponent']}\n"
                       "----------------------------------"
        }
        # Send the message to the Discord webhook
        response = requests.post(WEBHOOK_URL, json=message)

        if response.status_code == 204:
            print(f"Successfully sent game to Discord: {game['opponent']}")
        else:
            print(f"Failed to send game to Discord: {response.status_code}")

# Function to fetch and send games to Discord
def job():
    games = fetch_zalgiris_schedule()

    if games:
        send_to_discord(games)
    else:
        print("No upcoming games found.")

# Schedule the job to run every hour
schedule.every(1).hours.do(job)

# Loop to run the schedule
while True:
    schedule.run_pending()  # Run all the scheduled jobs
    time.sleep(60)  # Sleep for 1 minute to prevent high CPU usage
